apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: img-scan-trivy
spec:
  params:
    - name: image-url
      description: "The location of image to scan on quay Container Registry <server>/<namespace>/<repository>:<tag>"
      default: ""
    - name: SKOPEO_IMAGE
      default: quay.io/containers/skopeo:v1.1.0
    - name: IMAGE_FROM_TLS_VERIFY
      default: "true"
    - name: TRIVY_IMAGE
      default: quay.io/ibmgaragecloud/aquasec-trivy
  volumes:
    - name: oci-image
      emptyDir: {}
  steps:
    - name: pull-image
      image: $(params.SKOPEO_IMAGE)
      env:
        - name: REGISTRY_USER
          valueFrom:
            secretKeyRef:
              name: registry-access
              key: REGISTRY_USER
              optional: true
        - name: REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: registry-access
              key: REGISTRY_PASSWORD
              optional: true
      volumeMounts:
        - mountPath: /var/oci
          name: oci-image
      securityContext:
        privileged: true
      script: |
        IMAGE_FROM=$(params.image-url)
        REGISTRY_SERVER_FROM=$(echo "${IMAGE_FROM}" | awk -F / '{print $1}')
        IMAGE_TO="oci:/var/oci/image"
        IMAGE_FROM_TLS_VERIFY=$(params.IMAGE_FROM_TLS_VERIFY)
        echo "Tagging ${IMAGE_FROM} as ${IMAGE_TO}"
        set +x
        if [[ -n "${REGISTRY_USER}" ]] && [[ -n "${REGISTRY_PASSWORD}" ]] && [[ "${REGISTRY_SERVER_FROM}" != "image-registry.openshift-image-registry.svc:5000" ]]; then
          IMAGE_FROM_CREDS="--src-creds ${REGISTRY_USER}:${REGISTRY_PASSWORD}"
        fi
        set -x
        if [ "${REGISTRY_SERVER_FROM}" =~ ":" ]; then
          IMAGE_FROM_TLS_VERIFY="false"
        fi
        echo "skopeo copy --src-creds=xxxx --src-tls-verify=${IMAGE_FROM_TLS_VERIFY} docker://${IMAGE_FROM} ${IMAGE_TO}"
        set +x
        skopeo copy ${IMAGE_FROM_CREDS} --src-tls-verify=${IMAGE_FROM_TLS_VERIFY} docker://${IMAGE_FROM} ${IMAGE_TO}
    - name: scan-image
      image: $(params.TRIVY_IMAGE)
      volumeMounts:
        - mountPath: /var/oci
          name: oci-image
      script: |
          set -e
          PATH_TO_IMAGE="/var/oci/image"
          echo -e "Trivy Security Scan image in registry"
          trivy image --exit-code 0 --input ${PATH_TO_IMAGE}
          trivy image --exit-code 1 --severity CRITICAL --input ${PATH_TO_IMAGE}
          my_exit_code=$?
          echo "Scan exit code :--- $my_exit_code"
          if [ ${my_exit_code} == 1 ]; then
              echo "Trivy scanning completed. CRITICAL Vulnerabilities found."
              exit 1
          else
            echo "Trivy scanning completed. CRITICAL vulnerabilities not found."
          fi
